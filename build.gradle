buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.vanniktech:gradle-maven-publish-plugin:0.18.0'
	}
}

plugins {
	id 'java-gradle-plugin'
	id 'maven-publish'
	id 'com.gradle.plugin-publish' version '0.16.0'
	id 'signing'
	id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "com.vanniktech.maven.publish"

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group = "ru.onlinesim"
archivesBaseName = "OnlineSimApi"
description = 'Java client for OnlineSIM API (http://onlinesim.ru)'
version = project['version']
sourceCompatibility = 1.8

allprojects {
	plugins.withId("com.vanniktech.maven.publish") {
		mavenPublish {
			sonatypeHost = "S01"
		}
	}
}


repositories {
	mavenCentral()
}

dependencies {
	implementation "com.google.code.gson:gson:2.8.2"
	implementation "org.apache.httpcomponents:httpcore:4.4.9"
	implementation "org.apache.httpcomponents:httpclient:4.5.5"
	implementation 'org.jetbrains:annotations:16.0.2'
	implementation 'io.github.cdimascio:java-dotenv:5.2.2'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'

	testImplementation "org.mockito:mockito-core:2.23.0"
	testImplementation "org.hamcrest:hamcrest-library:1.3"
	testImplementation "nl.jqno.equalsverifier:equalsverifier:3.4.1"
	testImplementation "org.slf4j:slf4j-simple:1.7.25"
	testImplementation "com.pszymczyk.consul:embedded-consul:1.0.2"
}

pluginBundle {
	website = 'http://onlinesim.ru/'
	vcsUrl = 'https://github.com/s00d/onlinesim-java-api'
	tags = ['onlinesim', 'api']
}

gradlePlugin {
	plugins {
		greetingsPlugin {
			id = 'ru.onlinesim'
			displayName = 'OnlineSimApi'
			description = 'Wrapper for automatic reception of SMS-messages by onlinesim.ru'
			implementationClass = 'ru.onlinesim.OnlineSimApi'
		}
	}
}

//signing {
//	def signingKey = findProperty("signingKey")
//	def signingPassword = findProperty("signingPassword")
//	useInMemoryPgpKeys(signingKey, signingPassword)
//	sign stuffZip
//}

if (JavaVersion.current().isJava9Compatible()) {
	tasks.withType(JavaCompile).all { options.compilerArgs.addAll(['--release', '8']) }
}

test {
	enableAssertions = true
	useJUnitPlatform()

	testLogging {
		exceptionFormat 'full'
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STARTED,
				TestLogEvent.STANDARD_ERROR,
				TestLogEvent.STANDARD_OUT
		// Set to true if you want to see output from test


		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}

// --------------------------------------------------------------
// Tasks for publishing into Maven Central

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

//testlogger {
//	theme 'standard'
//	showExceptions true
//	showStackTraces true
//	showFullStackTraces false
//	showCauses true
//	slowThreshold 2000
//	showSummary true
//	showSimpleNames false
//	showPassed true
//	showSkipped true
//	showFailed true
//	showStandardStreams false
//	showPassedStandardStreams true
//	showSkippedStandardStreams true
//	showFailedStandardStreams true
//	logLevel 'lifecycle'
//}

//if (project.hasProperty('release')) {
//	println 'Using release profile for building ' + project.getName()
//	apply from: 'gradle/profile-release.gradle'
//}


